import { auth } from '@/lib/auth'; import { prisma } from '@/lib/prisma'; export default async function Pg(){ const s=await auth(); if(!s||(s as any).role!=='BARBER') return <div className='bg-white border rounded p-4'>Acesso restrito aos barbeiros.</div>; const uid=Number((s as any).user?.id); const b=await prisma.barber.findUnique({ where:{ userId:uid }, include:{ user:true } }); if(!b) return <div className='bg-white border rounded p-4'>Perfil de barbeiro nao encontrado.</div>; const td=new Date(); td.setHours(0,0,0,0); const wk=new Date(td.getTime()+7*86400000); const appts=await prisma.appointment.findMany({ where:{ barberId:b.id, start:{ gte: td, lt: wk } }, include:{ service:true, customer:true }, orderBy:{ start:'asc' } }); return (<div className='bg-white border rounded p-4 space-y-4'><h1 className='text-xl font-semibold'>Agenda da semana — {b.user.name}</h1><ul className='space-y-3'>{appts.map(a=>(<li key={a.id} className='border rounded p-3'><div className='font-medium'>{new Date(a.start).toLocaleString('pt-BR')}</div><div className='text-sm text-gray-700'>{a.service.name} — Cliente: {a.customer.name}</div></li>))}{appts.length===0&&<div className='text-sm text-gray-500'>Sem agendamentos nesta semana.</div>}</ul></div>); }